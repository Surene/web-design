布局

1 display：none与 visibility：hidden
第一个隐藏元素，并且不能再对其操作，相当于删除；而后者只是在视觉上的隐藏，实际上还是存在，会占据空间。
每个元素都有默认的display值，可以任意修改他 如何script标签默认值为none

2 margin：auto
这个样式可以使元素居中，原理是将浏览器窗口宽度减去设置的width再一分为二，这个值再等于左右边距。
但是当浏览器宽度比width小时，会出现一个水平滚动条，解决方法是将width设置为max-width，这样尽可能就会
避免出现浏览器宽度宽度比样式宽度小的情况

3 position：static 与position： absolute
static是指没有positioned的元素，非static值都是positioned的；
当有absolute值的元素的父辈如果position值是static，就会寻找上一代，直到body。这也说明
默认的position值不是static，而是另有他值。

4 float 与 clear float
通过左右浮动发生位置的偏移或改变，clear用来清除浮动，意思是将浮动这个特性清除，目的是避免对父元素造成破坏，
避免元素塌陷。在页面上的位置改变永远不会改变dom树中的位置
最常用的清除浮动的方法：
 .clearfix{*zoom: 1; }作用与clear： both相同

5 百分比布局、媒体查询、inline-block布局
三者都是按照宽度百分百来进行的布局，页面大小改变都不会使原页面的部分的比例保持不变
纯百分百布局在浏览器窗口较小时可能使页面变得奇怪，应该减少使用
媒体查询在窗口宽度比预设宽度小时会使原本横向排列的变成一列，在一列中显示所有内容
inline block
vertical-align 属性会影响到 inline-block 元素，你可能会把它的值设置为 top 。
你需要设置每一列的宽度
如果HTML源代码中元素之间有空格，那么列与列之间会产生空隙

6 column布局--列布局
分配不同比列的相同大小列来代替百分百，因为他只能是一些比较整齐的比列，有时候不是那么好用，但是又非常常用

7 flexbox布局-弹性盒子
最重要的是能够实现垂直方向的居中，常用的是水平对齐，但某些时候也需要垂直居中对齐， 详情见day3-note

8 z-index
只有当元素有定位属性时，设置z-index值才有意义，就算z-index值很大，但没有定位，那都没用
当父元素有z-index值时，子元素无论值为多少都和父元素保持一致
当父元素无z-index值时，子元素的z-index生效
两者都是有效z-index值且相同时，按照dom树中的顺序排列

9 常用的布局思想--左侧固定，右边自适应
7种常见该类布局 
文本流：双inline-block 双float  
浮动或定位： float+margin-left  absolute+ margin-left
特殊布局： flex 、gird 、 BFC  
极限情况：即当左侧宽度很小时，右侧发生怎样的变化
文本流落于下一行 浮动定位会被隐藏 BFC落于下一行 flex和gird保持不变

10 圣杯布局和双飞翼布局 --使三列中的中间栏可以页面自适应 
利用浮动元素的负外边距 某个元素虽然是写在了后面，但可以通过负边距让它在浏览器显示的时候是在前面的
见https://www.jianshu.com/p/81ef7e7094e8
https://www.cnblogs.com/2050/archive/2012/08/13/2636467.html


11 CSS函数--calc（）
可以动态计算长度值
需要注意的是，运算符前后都需要保留一个空格，例如：width: calc(100% - 10px)；
任何长度值都可以使用calc()函数进行计算；
calc()函数支持 "+", "-", "*", "/" 运算；
calc()函数使用标准的数学运算优先级规则；

直接使用上述布局是很难用的，所以诞生了一些框架来帮助我们进行页面的布局
注意： 只有当框架真正能满足你需要的功能时，才最好是使用框架，否则使用原生css会更好

